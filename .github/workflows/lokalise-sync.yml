name: Lokalise Translation Sync

on:
  # Push workflow: When translation files change in GitHub, push to Lokalise
  push:
    branches:
      - main
    paths:
      - 'src/shared/i18n.ts'
      - 'translations/**'
  
  # Pull workflow: Daily sync from Lokalise to GitHub
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC
  
  # Manual trigger
  workflow_dispatch:

jobs:
  # Job 1: Push changes from GitHub to Lokalise
  push-to-lokalise:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Extract translations to JSON
        run: |
          # Create translations directory if it doesn't exist
          mkdir -p translations
          
          # Extract translations from i18n.ts to JSON format
          node scripts/extract-translations-for-sync.js
      
      - name: Push to Lokalise via API
        run: |
          # Upload translations using Lokalise API directly
          API_TOKEN="${{ secrets.LOKALISE_API_TOKEN }}"
          PROJECT_ID="${{ secrets.LOKALISE_PROJECT_ID }}"
          
          echo "API Token: ${API_TOKEN:0:10}..."
          echo "Project ID: $PROJECT_ID"
          
          # Function to upload a translation file
          upload_file() {
            local lang=$1
            local file_path=$2
            
            if [ -f "$file_path" ]; then
              echo "Uploading $lang translations from $file_path..."
              echo "File size: $(wc -c < "$file_path") bytes"
              
              # Base64 encode the file content (Linux compatible)
              echo "Encoding file to base64..."
              file_content=$(base64 -w 0 "$file_path")
              echo "Base64 length: ${#file_content} characters"
              
              # Create temporary JSON file for the payload
              temp_json=$(mktemp)
              echo "Creating JSON payload in $temp_json"
              
              # Use jq to create properly escaped JSON
              jq -n \
                --arg data "$file_content" \
                --arg filename "${lang}.json" \
                --arg lang_iso "$lang" \
                '{
                  data: $data,
                  filename: $filename,
                  lang_iso: $lang_iso,
                  replace_modified: true,
                  convert_placeholders: true
                }' > "$temp_json"
              
              echo "JSON payload created, size: $(wc -c < "$temp_json") bytes"
              echo "First 200 chars of payload:"
              head -c 200 "$temp_json"
              echo ""
              
              # Upload file to Lokalise using correct API v2 format
              echo "Making API call to Lokalise..."
              response=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST \
                "https://api.lokalise.com/api2/projects/$PROJECT_ID/files/upload" \
                -H "X-Api-Token: $API_TOKEN" \
                -H "Content-Type: application/json" \
                -d @"$temp_json" 2>&1)
              
              # Check if curl command itself failed
              curl_exit_code=$?
              if [ $curl_exit_code -ne 0 ]; then
                echo "‚ùå Curl command failed with exit code: $curl_exit_code"
                echo "Response: $response"
                exit 1
              fi
              
              echo "Raw curl response:"
              echo "$response"
              
              # Clean up temporary file
              rm "$temp_json"
              
              # Extract HTTP status code
              http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
              response_body=$(echo "$response" | sed '/HTTP_CODE:/d' | sed '/^[[:space:]]*$/d')
              
              echo "Upload response for $lang (HTTP $http_code): $response_body"
              
              # Check if upload was successful
              if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
                echo "‚úÖ Successfully uploaded $lang translations"
              else
                echo "‚ùå Failed to upload $lang translations (HTTP $http_code)"
                echo "Response: $response_body"
                # Don't exit on failure, continue with other files
              fi
            else
              echo "File $file_path not found, skipping $lang"
            fi
          }
          
          # Upload all language files
          upload_file "en" "translations/en.json"
          upload_file "nl" "translations/nl.json"
          upload_file "de" "translations/de.json"
          upload_file "fr" "translations/fr.json"
          upload_file "it" "translations/it.json"
          upload_file "es" "translations/es.json"

  # Job 2: Pull changes from Lokalise to GitHub
  pull-from-lokalise:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Pull from Lokalise via API
        run: |
          # Download translations using Lokalise API directly
          API_TOKEN="${{ secrets.LOKALISE_API_TOKEN }}"
          PROJECT_ID="${{ secrets.LOKALISE_PROJECT_ID }}"
          
          # Create translations directory
          mkdir -p translations
          
          # Download all translations as a bundle
          echo "Downloading translations from Lokalise..."
          
          # Create temporary JSON file for export request
          temp_export_json=$(mktemp)
          echo '{' > "$temp_export_json"
          echo '  "format": "json",' >> "$temp_export_json"
          echo '  "original_filenames": true,' >> "$temp_export_json"
          echo '  "directory_prefix": "",' >> "$temp_export_json"
          echo '  "all_platforms": false,' >> "$temp_export_json"
          echo '  "filter_langs": ["en", "nl", "de", "fr", "it", "es"],' >> "$temp_export_json"
          echo '  "export_empty_as": "skip"' >> "$temp_export_json"
          echo '}' >> "$temp_export_json"
          
          # Trigger export
          export_response=$(curl -s -X POST \
            "https://api.lokalise.com/api2/projects/$PROJECT_ID/files/export" \
            -H "X-Api-Token: $API_TOKEN" \
            -H "Content-Type: application/json" \
            -d @"$temp_export_json")
          
          # Clean up temporary file
          rm "$temp_export_json"
          
          echo "Export response: $export_response"
          
          # Extract bundle URL from response
          bundle_url=$(echo "$export_response" | grep -o '"bundle_url":"[^"]*"' | cut -d'"' -f4)
          
          if [ -n "$bundle_url" ]; then
            echo "Downloading bundle from: $bundle_url"
            
            # Download and extract the bundle
            curl -s -L "$bundle_url" -o translations_bundle.zip
            unzip -o translations_bundle.zip -d translations/
            rm translations_bundle.zip
            
            echo "Translations downloaded successfully"
            
            # List downloaded files
            echo "Downloaded files:"
            ls -la translations/
          else
            echo "Failed to get bundle URL from export response"
            echo "Full response: $export_response"
            exit 1
          fi
      
      - name: Update i18n.ts with new translations
        run: |
          # Update the i18n.ts file with translations from Lokalise
          node scripts/update-i18n-from-lokalise.js
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update translations from Lokalise'
          title: 'üåê Update translations from Lokalise'
          body: |
            This PR contains updated translations from Lokalise.
            
            **Changes:**
            - Updated translation files from Lokalise
            - Updated `src/shared/i18n.ts` with new translations
            
            **Review:**
            - Please review the changes carefully
            - Test the extension with updated translations
            - Merge when ready
          branch: update-translations-from-lokalise
          delete-branch: true
